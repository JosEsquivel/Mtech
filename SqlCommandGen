using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static Class1;

namespace HashQuery
{
    /*Usage example
        
        enum sqlConnection
        {
            AWSCybersourceCnxStr = 0
        }
        sqlConnection connectionStringSelection;

        Hashtable queryParameters = new Hashtable()
        { {"@Column", "ID" },
          {"@Table", "Automovil" } };


        connectionStringSelection = sqlConnection.AWSCybersourceCnxStr;
        string connectionStr = "";
        switch (connectionStringSelection)
        {
            case sqlConnection.AWSCybersourceCnxStr:
                connectionStr = System.Configuration.ConfigurationManager.ConnectionStrings["AWS.CybersourceCnxStr"].ConnectionString; ;
                break;
            default:
                break;
        }        

        queryObj = new sqlCommandGenerator();
        queryObj.commandText = "select @Column from @Table";
        queryObj.connectionString = connectionStr;
        queryObj.typeOfCommand = sqlCommandGenerator.SQLCommandTypes.Text;
        bool obj_createdSuccesfuly = queryObj.SetParameters(queryParameters);
        SqlCommand sqlQueryObj = queryObj.GetQueryObject();

    */

    public class sqlCommandGenerator
    {

        /*The variables commandText, connection and typeOfCommand are to be given as properties of the class before 
         * executing the GetQueryObject() function*/
        public string commandText;  //variable to contain the operation, wether it is a stored procedure or a string query
        //public SqlConnection connection; //variable to store the SqlConnection object
        public string connectionString = "";
        public SQLCommandTypes typeOfCommand; //Variable to store the type of the command, it can be SQLCommandTypes.Text or SQLCommandTypes.StoredProcedure
        private SqlCommand command; //propertie of the class which contains the actual command object to be returned
        private bool correctlyCreated = false; //flag to know if the object was succesfuly created

        Hashtable errorSet = new Hashtable  //hashtable containing all the possible error messages inside this class
        {
            {"setParametersError","Setting the parameters to the SqlCommand object failed, error thrown:" },
            {"notStringParameter","The parameter {0} inside the given parameters HashTable is not of type string" },
            {"missingStarting@","The parameter {0} inside the given parameters HashTable does not start with a @" },
            {"nullValueParameter","The parameter {0} inside the given parameters HashTable has a null value" },
            {"invalidValueParameter","The parameter {0} inside the given parameters HashTable has an invalid value" },
            {"wrongNumberOfParameters","The number of parameters required and given for the query are different. {0} were given inside the HashTable and {1} are required in the query" },
            {"missingRequiredParameter","The parameter {0} is required by the text query but was not given in the parameters HashTable" },
            {"stringConnectionError","The string connection has not been set up correctly. Give the string connection by a String or by a parameter in .config file, not both" }
        };

        public LOGService logger = new LOGService("logs.txt", true, Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "LOGS"));
        public sqlCommandGenerator() { } //empty constructor
        public enum SQLCommandTypes //enum possesing the only two valid values for a sql command Type
        {
            Text = 0,
            StoredProcedure = 1
        }
        public SQLCommandTypes returnCommandType()
        {
            return typeOfCommand;
        }

        private void CheckParameters(Hashtable parametersHashTable, string nameOfCallingMethod) //function to check if the parameter's HashTable has the right format
        {
            foreach (DictionaryEntry pair in parametersHashTable)
            {
                //inside each if we get the key for the pair in the present iteration of the for each, we retrieve its key and make validations to check if both key and parameter have a suitable format
                if (pair.Key.GetType() != typeof(string))       
                {
                    System.Console.WriteLine("error.exc.sqlCommandGenerator.CheckParameters_"+nameOfCallingMethod+": "+(string)errorSet["notStringParameter"], pair.Key);
                    logger.WriteFile(String.Format("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod +": "+(string)errorSet["notStringParameter"], pair.Key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod+": "+(string)errorSet["notStringParameter"], pair.Key));
                    throw argEx;
                }
                string presentKey = pair.Key.ToString();
                if (presentKey[0] != '@')
                {
                    System.Console.WriteLine("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod +": "+(string)errorSet["missingStarting@"], pair.Key);
                    logger.WriteFile(String.Format("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod + ": " + (string)errorSet["missingStarting@"], pair.Key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod + ": " + (string)errorSet["missingStarting@"], pair.Key));
                    throw argEx;
                }
                if (parametersHashTable[pair.Key] == null)
                {
                    System.Console.WriteLine("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod + ": " + (string)errorSet["nullValueParameter"], pair.Key);
                    logger.WriteFile(String.Format("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod + ": " + (string)errorSet["nullValueParameter"], pair.Key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod + ": " + (string)errorSet["nullValueParameter"], pair.Key));
                    throw argEx;
                }
                if (parametersHashTable[pair.Key].ToString().Length < 1)
                {
                    System.Console.WriteLine("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod + ": " + (string)errorSet["invalidValueParameter"], pair.Key);
                    logger.WriteFile(String.Format("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod + ": " + (string)errorSet["invalidValueParameter"], pair.Key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("error.exc.sqlCommandGenerator.CheckParameters_" + nameOfCallingMethod + ": " + (string)errorSet["invalidValueParameter"], pair.Key));
                    throw argEx;
                }


            }

        }
        private void CheckParametersNumber(Hashtable parametersHashTable, string queryWithParameters, string nameOfCallingMethod) //if the query to be executed is string, checks if the parameters required are the same as the given ones
        {
            int numberofParametersInQuery = queryWithParameters.Count(f => f == '@');
            int numberOfParametersInHashTable = parametersHashTable.Count;
            if(numberofParametersInQuery!= numberOfParametersInHashTable)
            {
                logger.WriteFile(String.Format("error.exc.sqlCommandGenerator.CheckParametersNumber_" + nameOfCallingMethod + ": " + (string)errorSet["wrongNumberOfParameters"], numberOfParametersInHashTable, numberofParametersInQuery));
                System.ArgumentException argEx = new System.ArgumentException(String.Format("error.exc.sqlCommandGenerator.CheckParametersNumber_" + nameOfCallingMethod + ": " + (string)errorSet["wrongNumberOfParameters"], numberOfParametersInHashTable, numberofParametersInQuery));
                throw argEx;
            }
        }
        private void CheckRequiredParameters(Hashtable parametersHashTable, string queryWithParameters, string nameOfCallingMethod)
        {
            string[] str = queryWithParameters.Split(' '); //aquirement of each word inside the query text
            Hashtable parametersFound = new Hashtable();  //hashtable to save the required parameters
            for (int i = 0; i < str.Length; i++)
            {
                if (str[i].Length < 1)    //check if the string is not empty
                    continue;
                if (str[i][0] == '@')     //if the word starts with an '@', meaning it is a parameter, it's saved in the hashtable parametersFound
                {
                    parametersFound.Add(str[i], false);
                }
            }
            try
            {
                foreach (var key in parametersHashTable.Keys) //check if the parameters hashtable contains the required parameter by the text query
                {
                    parametersFound[key] = true;
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message);
                System.Console.WriteLine(ex.Message);
            }

            foreach (var key in parametersFound.Keys)
            {
                if (parametersFound[key].ToString() == "False")   //in case a parameter was not given, an exception will be rised
                {
                    Console.WriteLine("error.exc.sqlCommandGenerator.CheckRequiredParameters" + nameOfCallingMethod + ": " + (string)errorSet["missingRequiredParameter"], key);
                    logger.WriteFile(String.Format("error.exc.sqlCommandGenerator.CheckRequiredParameters" + nameOfCallingMethod + ": " + (string)errorSet["missingRequiredParameter"], key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("error.exc.sqlCommandGenerator.CheckRequiredParameters" + nameOfCallingMethod + ": " + (string)errorSet["missingRequiredParameter"], key));
                    throw argEx;
                }
            }
        }
        public bool SetParameters(Hashtable parameters) //Method to assign to the command object all its properties
        {
            bool status = true;
            CheckParameters(parameters,"SetPameters"); //function to check if the parameter's Hashtable has suitable values, in case it does not, an exception will be thrown

            if(typeOfCommand == SQLCommandTypes.Text)
            {
                CheckParametersNumber(parameters, commandText,"SetParameters"); //checks if the given parameters and the required in the query are the same number, only applicable for text queries
                CheckRequiredParameters(parameters, commandText, "SetParameters"); //checks if every parameter required by the commandText is given in the parameters hashtable
            }
                
            try
            {
                SqlConnection connection = new SqlConnection(connectionString);
                command = new SqlCommand(commandText, connection);  //instanciate the command objet as a SqlCommand and the commandText and connection properties are given

                switch (typeOfCommand)  //switch case to assign the right CommandType to the command object
                {
                    case SQLCommandTypes.Text:
                        command.CommandType = System.Data.CommandType.Text;
                        break;

                    case SQLCommandTypes.StoredProcedure:
                        command.CommandType = System.Data.CommandType.StoredProcedure;
                        break;

                    default:
                        command.CommandType = System.Data.CommandType.Text;
                        System.Console.WriteLine("Command type not valid, asigning it to Text type");
                        logger.WriteFile("msg.sqlCommandGenerator.SetParameters: Command type not valid or not given, asigning it to Text type");
                        break;
                }

                foreach (string key in parameters.Keys) //We iterate inside the parameters' keys to assign them to the command.Parameters
                    command.Parameters.AddWithValue(key, parameters[key]);
                logger.WriteFile("msg.sqlCommandGenerator.SetParameters: sqlCommand object created correctly");
            }
            catch(Exception e)
            {
                status = false;
                logger.WriteFile("error.exc.sqlCommandGenerator.SetParameters: " + (string)errorSet["setParametersError"] + e.Message);
                System.ArgumentException argEx = new System.ArgumentException(System.String.Format("error.exc.sqlCommandGenerator.SetParameters: " + (string)errorSet["setParametersError"] + e.Message));
                throw argEx;
            }

            correctlyCreated = status;
            return status;
        }

        public bool getStatus()
        {
            return correctlyCreated;
        }
        public SqlCommand GetQueryObject()
        {
            logger.WriteFile("sqlCommand object returned");
            return command;
        }
    }
}
