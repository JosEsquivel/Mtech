using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static Class1;

namespace HashQuery
{
    /*Usage example
        Hashtable queryParameters = new Hashtable()
        { {"@Column", "ID" },
          {"@Table", "Automovil" } };
        SqlConnection connection = new SqlConnection("Data Source=localhost\\SQLSERVER;Initial Catalog=YourDataBaseName;Integrated Security=True");
        
         sqlCommandGenerator queryObj = new sqlCommandGenerator();
            queryObj.commandText = "select @Column from @Table";
            queryObj.connection = connection;
            queryObj.typeOfCommand= sqlCommandGenerator.SQLCommandTypes.StoredProcedure;
            bool obj_createdSuccesfuly = queryObj.SetParameters(queryParameters);
            
         SqlCommand sqlQueryObj = queryObj.GetQueryObject();*/

    public class sqlCommandGenerator
    {

        /*The variables commandText, connection and typeOfCommand are to be given as properties of the class before 
         * executing the GetQueryObject() function*/
        public string commandText;  //variable to contain the operation, wether it is a stored procedure or a string query
        public SqlConnection connection; //variable to store the SqlConnection object
        public SQLCommandTypes typeOfCommand; //Variable to store the type of the command, it can be SQLCommandTypes.Text or SQLCommandTypes.StoredProcedure

        private SqlCommand command; //propertie of the class which contains the actual command object to be returned
        private bool correctlyCreated = false; //flag to know if the object was succesfuly created

        public LOGService logger = new LOGService("logs.txt", true, Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "LOGS"));
        public sqlCommandGenerator() { } //empty constructor
        public enum SQLCommandTypes //enum possesing the only two valid values for a sql command Type
        {
            Text = 0,
            StoredProcedure = 1
        }
        public SQLCommandTypes returnCommandType()
        {
            return typeOfCommand;
        }

        private void CheckParameters(Hashtable parametersHashTable) //function to check if the parameter's HashTable has the right format
        {
            foreach (DictionaryEntry pair in parametersHashTable)
            {
                //inside each if we get the key for the pair in the present iteration of the for each, we retrieve its key and make validations to check if both key and parameter have a suitable format
                if (pair.Key.GetType() != typeof(string))       
                {
                    System.Console.WriteLine("The key {0} inside the parameters HashTable given is not type string", pair.Key);
                    logger.WriteFile(String.Format("The key {0} inside the parameters HashTable given  is not type string", pair.Key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("The key {0} inside the parameters HashTable given is not type string", pair.Key));
                    throw argEx;
                }
                string presentKey = pair.Key.ToString();
                if (presentKey[0] != '@')
                {
                    System.Console.WriteLine("The key {0} inside the parameters HashTable given does not start with a @", pair.Key);
                    logger.WriteFile(String.Format("The key {0} inside the parameters HashTable given does not start with a @", pair.Key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("The key {0} inside the parameters HashTable given does not start with a @", pair.Key));
                    throw argEx;
                }
                if (parametersHashTable[pair.Key] == null)
                {
                    System.Console.WriteLine("The key {0} inside the parameters HashTable given has a null value for a parameter", pair.Key);
                    logger.WriteFile(String.Format("The key {0} inside the parameters HashTable given has a null value for a parameter", pair.Key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("The key {0} inside the parameters HashTable given has a null value for a parameter", pair.Key));
                    throw argEx;
                }
                if (parametersHashTable[pair.Key].ToString().Length < 1)
                {
                    System.Console.WriteLine("The key {0} inside the parameters HashTable given has an invalid parameter", pair.Key);
                    logger.WriteFile(String.Format("The key {0} inside the parameters HashTable given has an invalid parameter", pair.Key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("The key {0} inside the parameters HashTable given has an invalid parameter", pair.Key));
                    throw argEx;
                }


            }

        }
        private void CheckParametersNumber(Hashtable parametersHashTable, string queryWithParameters) //if the query to be executed is string, checks if the parameters required are the same as the given ones
        {
            int numberofParametersInQuery = queryWithParameters.Count(f => f == '@');
            int numberOfParametersInHashTable = parametersHashTable.Count;
            if(numberofParametersInQuery!= numberOfParametersInHashTable)
            {
                logger.WriteFile(String.Format("The number of parameters required and given for the query are different. {0} were given inside the HashTable and {1} are required in the query", numberOfParametersInHashTable, numberofParametersInQuery));
                System.ArgumentException argEx = new System.ArgumentException(String.Format("The number of parameters required and given for the query are different. {0} were given inside the HashTable and {1} are required in the query", numberOfParametersInHashTable, numberofParametersInQuery));
                throw argEx;
            }
        }
        private void CheckRequiredParameters(Hashtable parametersHashTable, string queryWithParameters)
        {
            string[] str = queryWithParameters.Split(' '); //aquirement of each word inside the query text
            Hashtable parametersFound = new Hashtable();  //hashtable to save the required parameters
            for (int i = 0; i < str.Length; i++)
            {
                if (str[i].Length < 1)    //check if the string is not empty
                    continue;
                if (str[i][0] == '@')     //if the word starts with an '@', meaning it is a parameter, it's saved in the hashtable parametersFound
                {
                    parametersFound.Add(str[i], false);
                }
            }
            try
            {
                foreach (var key in parametersHashTable.Keys) //check if the parameters hashtable contains the required parameter by the text query
                {
                    parametersFound[key] = true;
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message);
                System.Console.WriteLine(ex.Message);
            }

            foreach (var key in parametersFound.Keys)
            {
                if (parametersFound[key].ToString() == "False")   //in case a parameter was not given, an exception will be rised
                {
                    Console.WriteLine("the parameter {0} is required by the text query but was not given in the parameters HashTable ", key);
                    logger.WriteFile(String.Format("the parameter {0} is required by the text query but was not given in the parameters HashTable ", key));
                    System.ArgumentException argEx = new System.ArgumentException(String.Format("the parameter {0} is required by the text query but was not given in the parameters HashTable ", key));
                    throw argEx;
                }
            }
        }
        public bool SetParameters(Hashtable parameters) //Method to assign to the command object all its properties
        {
            bool status = true;
            CheckParameters(parameters); //function to check if the parameter's Hashtable has suitable values, in case it does not, an exception will be thrown

            if(typeOfCommand == SQLCommandTypes.Text)
            {
                CheckParametersNumber(parameters, commandText); //checks if the given parameters and the required in the query are the same number, only applicable for text queries
                CheckRequiredParameters(parameters, commandText); //checks if every parameter required by the commandText is given in the parameters hashtable

            }
                
            try
            {
                command = new SqlCommand(commandText, connection);  //instanciate the command objet as a SqlCommand and the commandText and connection properties are given

                switch (typeOfCommand)  //switch case to assign the right CommandType to the command object
                {
                    case SQLCommandTypes.Text:
                        command.CommandType = System.Data.CommandType.Text;
                        break;

                    case SQLCommandTypes.StoredProcedure:
                        command.CommandType = System.Data.CommandType.StoredProcedure;
                        break;

                    default:
                        command.CommandType = System.Data.CommandType.Text;
                        System.Console.WriteLine("Command type not valid, asigning it to Text type");
                        //TODO poner en el LOG
                        break;
                }

                foreach (string key in parameters.Keys) //We iterate inside the parameters' keys to assign them to the command.Parameters
                    command.Parameters.AddWithValue(key, parameters[key]);
                logger.WriteFile("sqlCommand object created correctly");
            }
            catch(Exception e)
            {
                status = false;
                logger.WriteFile("The addition of the parameters to the SqlCommand object failed, error thrown: " + e.Message);
                System.ArgumentException argEx = new System.ArgumentException("The addition of the parameters to the SqlCommand object failed", e);
                throw argEx;
            }

            correctlyCreated = status;
            return status;
        }

        public bool getStatus()
        {
            return correctlyCreated;
        }
        public SqlCommand GetQueryObject()
        {
            logger.WriteFile("sqlCommand object returned");
            return command;
        }
    }
}
